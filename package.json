{
    "name": "express-HelloWorld",
    "description": "Hello World ExpressJS WebService",
    "version": "0.0.1",
    "private": true,
    "dependencies": {
        "aws-serverless-express": "^3.1.3",
        "express": "4.17.3"
    },
    "devDependencies": {
        "mocha": "5.0.0",
        "unit.js": "2.0.0",
        "supertest": "3.0.0"
    },
    "config": {
        "s3BucketName": "aws-codestar-ap-northeast-1-198606590602-portfolio02flui-pipe",
        "region": "ap-northeast-1",
        "cloudFormationStackName": "AwsServerlessExpressStack",
        "functionName": "awscodestar-portfolio02flui-lambda-HelloWorld-1U57Q55A2VPFC",
        "accountId": "198606590602"
    },
    "scripts": {
        "start": "node app.local.js",
        "config": "node ./scripts/configure.js",
        "deconfig": "node ./scripts/deconfigure.js",
        "local": "node scripts/local",
        "invoke-lambda": "aws lambda invoke --function-name $npm_package_config_functionName --region $npm_package_config_region --payload file://api-gateway-event.json lambda-invoke-response.json && cat lambda-invoke-response.json",
        "create-bucket": "aws s3 mb s3://$npm_package_config_s3BucketName --region $npm_package_config_region",
        "delete-bucket": "aws s3 rb s3://$npm_package_config_s3BucketName --region $npm_package_config_region",
        "package": "aws cloudformation package --template ./cloudformation.yaml --s3-bucket $npm_package_config_s3BucketName --output-template packaged-sam.yaml --region $npm_package_config_region",
        "deploy": "aws cloudformation deploy --template-file packaged-sam.yaml --stack-name $npm_package_config_cloudFormationStackName --capabilities CAPABILITY_IAM --region $npm_package_config_region",
        "package-deploy": "npm run package && npm run deploy",
        "delete-stack": "aws cloudformation delete-stack --stack-name $npm_package_config_cloudFormationStackName --region $npm_package_config_region",
        "setup": "npm install && (aws s3api get-bucket-location --bucket $npm_package_config_s3BucketName --region $npm_package_config_region || npm run create-bucket) && npm run package-deploy",
        "test": "mocha --recursive tests",
        "win-config": "npm run config",
        "win-deconfig": "npm run deconfig",
        "win-local": "npm run local",
        "win-invoke-lambda": "aws lambda invoke --function-name %npm_package_config_functionName% --region %npm_package_config_region% --payload file://api-gateway-event.json lambda-invoke-response.json && cat lambda-invoke-response.json",
        "win-create-bucket": "aws s3 mb s3://%npm_package_config_s3BucketName% --region %npm_package_config_region%",
        "win-delete-bucket": "aws s3 rb s3://%npm_package_config_s3BucketName% --region %npm_package_config_region%",
        "win-package": "aws cloudformation package --template ./cloudformation.yaml --s3-bucket %npm_package_config_s3BucketName% --output-template packaged-sam.yaml --region %npm_package_config_region%",
        "win-deploy": "aws cloudformation deploy --template-file packaged-sam.yaml --stack-name %npm_package_config_cloudFormationStackName% --capabilities CAPABILITY_IAM --region %npm_package_config_region%",
        "win-package-deploy": "npm run win-package && npm run win-deploy",
        "win-delete-stack": "aws cloudformation delete-stack --stack-name %npm_package_config_cloudFormationStackName% --region %npm_package_config_region%",
        "win-setup": "npm install && (aws s3api get-bucket-location --bucket %npm_package_config_s3BucketName% --region %npm_package_config_region% || npm run win-create-bucket) && npm run win-package-deploy"
    }
}
